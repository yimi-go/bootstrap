// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yimi-go/shutdown (interfaces: Trigger,Controller,Callback,Event,ErrorHandler)

// Package bootstrap is a generated GoMock package.
package bootstrap

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shutdown "github.com/yimi-go/shutdown"
)

// MockTrigger is a mock of Trigger interface.
type MockTrigger struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerMockRecorder
}

// MockTriggerMockRecorder is the mock recorder for MockTrigger.
type MockTriggerMockRecorder struct {
	mock *MockTrigger
}

// NewMockTrigger creates a new mock instance.
func NewMockTrigger(ctrl *gomock.Controller) *MockTrigger {
	mock := &MockTrigger{ctrl: ctrl}
	mock.recorder = &MockTriggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrigger) EXPECT() *MockTriggerMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockTrigger) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTriggerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTrigger)(nil).Name))
}

// Wait mocks base method.
func (m *MockTrigger) Wait(arg0 context.Context, arg1 shutdown.Controller) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTriggerMockRecorder) Wait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrigger)(nil).Wait), arg0, arg1)
}

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AddShutdownCallback mocks base method.
func (m *MockController) AddShutdownCallback(arg0 shutdown.Callback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddShutdownCallback", arg0)
}

// AddShutdownCallback indicates an expected call of AddShutdownCallback.
func (mr *MockControllerMockRecorder) AddShutdownCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddShutdownCallback", reflect.TypeOf((*MockController)(nil).AddShutdownCallback), arg0)
}

// AddTrigger mocks base method.
func (m *MockController) AddTrigger(arg0 shutdown.Trigger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTrigger", arg0)
}

// AddTrigger indicates an expected call of AddTrigger.
func (mr *MockControllerMockRecorder) AddTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrigger", reflect.TypeOf((*MockController)(nil).AddTrigger), arg0)
}

// HandleShutdown mocks base method.
func (m *MockController) HandleShutdown(arg0 context.Context, arg1 shutdown.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleShutdown", arg0, arg1)
}

// HandleShutdown indicates an expected call of HandleShutdown.
func (mr *MockControllerMockRecorder) HandleShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleShutdown", reflect.TypeOf((*MockController)(nil).HandleShutdown), arg0, arg1)
}

// Wait mocks base method.
func (m *MockController) Wait(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockControllerMockRecorder) Wait(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockController)(nil).Wait), arg0)
}

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// OnShutdown mocks base method.
func (m *MockCallback) OnShutdown(arg0 context.Context, arg1 shutdown.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnShutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnShutdown indicates an expected call of OnShutdown.
func (mr *MockCallbackMockRecorder) OnShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnShutdown", reflect.TypeOf((*MockCallback)(nil).OnShutdown), arg0, arg1)
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Reason mocks base method.
func (m *MockEvent) Reason() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reason")
	ret0, _ := ret[0].(string)
	return ret0
}

// Reason indicates an expected call of Reason.
func (mr *MockEventMockRecorder) Reason() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reason", reflect.TypeOf((*MockEvent)(nil).Reason))
}

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// OnError mocks base method.
func (m *MockErrorHandler) OnError(arg0 context.Context, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", arg0, arg1)
}

// OnError indicates an expected call of OnError.
func (mr *MockErrorHandlerMockRecorder) OnError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockErrorHandler)(nil).OnError), arg0, arg1)
}
